=======================
FIRST CONTACT
Read all code in 1 hour
=======================
Checklist:
• Abstract classes and methods reveal design intentions.
• Classes high in the hierarchy often define domain abstractions; their subclasses introduce variations on a theme.
• Occurrences of the Singleton [p. 321] pattern may represent information that is constant for the entire execution of a system.
• Surprisingly large structures often specify important chunks of functionality.
• Comments reveal a lot about the design intentions behind a particular piece of code, yet may often be misleading.

=====================
Findings per project:
=====================
/be.ac.ua.ansymo.cheopsj
Only contains feature.xml with references to all other projects. 
Also contains update site url. Apparently is for finding and installing the plugin.

/be.ac.ua.ansymo.cheopsj.branding
Contains a manifest and about.html website. Maybe for the plugin page.

/be.ac.ua.ansymo.cheopsj.changerecorders
	Datastructures for storing the changes of each type of entity (Class, Method, Variable, etc)
	AbstractEntityRecorder at TOP of hierarchy subclassed by all recorders.
	StatementRecorder also abstract subclassed only by LocalVariable and MethodInvocation recorders adds extra common methods
	One class recorder for each type of change (e.g. field, method, package, etc)
	Store change method used by all and they also implement the createAndLinkFamixElement and createAndLinkChange methods.
	FOR OUR PROJECT GOAL: We would need to extend/create some recorders e.g. local variables, method signature, accessors, etc.
	Note: Some of this classes are already in the project but have been excluded form the build path (probably incomplete) so we can maybe use
	them as basis.
	Comments: Decent amount of comments in the most important classes and methods, the functionality of these classes is also not very complicated.
	
/be.ac.ua.ansymo.cheopsj.distiller
	This whole project implements the functionality of CHEOPSJ to extract the changes from an existing java project by
	connecting to a SVN repository and "distilling" the changes stored there by means of an external library called ChangeDistiller from the
	Evolizer platform.

	- distiller.cd
		ChangeDistillerProxy uses the API of the ChangeDistiller to extract the source code changes from two java files
	- distiller.popup.actions
		Implements the actions taken when the user selects "Distill Changes" and "Distill Additions" from the popup menu
	- distiller.svnconnection
		Takes care of connecting and extracting the revisions from the SVN repository.
		The SVN url is currently hardcoded and this could cause problems.
	
/be.ac.ua.ansymo.cheopsj.logger
	The class Cheops when the plugin is started creates new listeners.JavaElementChange class which is used as a listener for the changes that has
	been made.

	- logger.astdiffer
		The class ASTComparator is used in the ChangeRecorder class in the method findAndLogChanges and in class DistillChanges in order to
		compare the old and new AST and to find the differences by using the method diff.
		The DiffVisitor class extends ASTVisitor which is used to visit every node in an Abstract Syntax Tree. This class is instanciated in
		the ASTComparator class in order to compare the differencies between the two ASTs.
	- logger.listeners
		The class JavaElementChange creates new IElementChangedListener which is used when a new Cheops is created and serves as a listener
		if any changes are made to a Java element. It records the fine grained changes using the method recordElementChanges().
		The method recordElementChanges in the class ChangeRecorder is used by JavaElementChange in order to record the changes made
		inside the Java editor.

/be.ac.ua.ansymo.cheopsj.model
	There are no tests implemented for this package.
	
	The ModelManager class as it is written in the main comment is a singleton class (only one instance of the class) 
	and is storing all the Famix Entities created and the changes that have been made to them. This class has a decent number 
	of comments and they are helpful for understanding the role of this class. The class ModelManager contains methods
	used to manipulate with all the Famix entities created and also the changes that have been done to them (ex. famixElementExist, 
	famixClassExists, getFamixVariable etc.). This class also adds a listener which is an instance from the class ModelManagerListener,
	the listener is updated whenever a change is done to the model.
	
	- model.changes
		The class Change implements the interface IChange, which extends the IAdaptable interface (an interface for adapdable objects).
		This class only implements the methods from the interface and is extended by AtomicChange and CompositeChange classes.
		The class Subject implements methods for finding the latest changes that occured. Its methods are mainly used by the classes in
		the package cheopsj.changerecorders for getting the latest additions, removals or changes of some of the Famix objects.

		Hierarchy of the classes in this package:
		Change	<-    AtomicChange	<-   Modify
						<-   Add
						<-   Remove
			<-    CompositeChange

		The most important class is Change which methods are used almost in every other root package of the workspace to arrange the 
		semantical and structural hierarchy and also is extended so some additional methods are added for addition, removal or modifing an element.
	- model.famix
		The FamixObject class is one of the most important classes because it is extended afterwards and is on the top of the hierachy
		in this package. It contains a collection of famix properties (properties of the famix elements like name, value, to which object does
		the property belongs) and methods for managing the properties (setters, getters ...).
		The classes that are leaves in the hierachy are using methods for standard operations regarding the famix class they are located into. 
		For example in the class FamixClass there are methods for adding methods, attributes to the FamixClass or in the class FamixPackage which is
		also a large class there are methods for checking if the package is empty, removing classes from the package, returning the size of the package.

		Subject   <-   FamixObject   <-   FamixEntity		<-   FamixClass
									<-   FamixMethod
									<-   FamixFunction
									<-	...
									<-	...
					     
					     <-   FamixAssociation	<-   FamixAccess
									<-   FamixInheritanceDefinition
									<-   FamixInvocation
/be.ac.ua.ansymo.cheopsj.model.ui
	UI model
/be.ac.ua.ansymo.cheopsj.testtool
	Testing
	
/be.ac.ua.ansymo.cheopsj.update
	
/org.evolizer.changedistiller
External library for extracting source code changes from two java files.